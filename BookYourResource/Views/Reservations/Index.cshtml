@model List<ReservationViewModel>

<h2>Active Reservations</h2>

@if (User.Identity.IsAuthenticated)
{
    
    <a asp-action="CreateReservationForm" class="btn btn-success mb-2">NEW</a>
}

@if (User.Identity.IsAuthenticated) 
{
    <input id="search-input" type="text" placeholder="Search by resource name..." class="form-control mb-3" style="display:inline-block; width: 200px;" />
}

<table class="table">
    <thead>
        <tr>
            <th>Resource Name</th>
            <th>User</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Hours</th>
            @if (User.Identity.IsAuthenticated) 
            {
                <th>Actions</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var reservation in Model)
        {
            <tr>
                <td>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <a asp-action="Details" asp-route-id="@reservation.Id">@reservation.ResourceName</a>
                    }
                    else
                    {
                        @reservation.ResourceName
                    }
                </td>
                <td>@reservation.UserName</td>
                <td>@reservation.StartDate.ToString("g")</td>
                <td>@reservation.EndDate.ToString("g")</td>
                <td>@reservation.GetTotalHours().ToString("F0")</td>
                @if (User.Identity.IsAuthenticated)
                {
                    <td>
                        @if (reservation.CanDelete)
                        {
                            <button onclick="deleteReservation(@reservation.Id)" class="btn btn-danger">DELETE</button>
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>



@section Scripts {
    <script>
        // Simple Auth Status for Js

         let isAuthenticated = false;

        // Check if the user can acces authorised route
        fetch('/users/me')
            .then(response => {
                if (response.ok) {
                    isAuthenticated = true; // User is authenticated
                }
            })
            .catch(error => {
                console.error('Error checking authentication:', error);
            });


        function deleteReservation(id) {
            if (confirm('Are you sure you want to delete this reservation?')) {
                fetch(`/reservations/${id}`, {
                    method: 'DELETE'
                }).then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        alert('Failed to delete reservation.');
                    }
                });
            }
        }

        // Searchbar by CODE_NAME
        let typingTimer;
        const doneTypingInterval = 300;

        document.getElementById('search-input').addEventListener('keyup', function() {
            clearTimeout(typingTimer);
            typingTimer = setTimeout(function() {
                const query = document.getElementById('search-input').value;
                searchReservations(query);
            }, doneTypingInterval);
        });

        document.getElementById('search-input').addEventListener('keydown', function() {
            clearTimeout(typingTimer);
        });



        function formatDate(dateString) {
            // Parse the date string in a way that preserves the local timezone
            const date = new Date(dateString);
            const options = {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                hour12: false,
                @* timeZone: 'UTC' // Ensure you're working in UTC for display *@
            };
            return date.toLocaleString('en-GB', options).replace(',', ''); // Remove the comma
        }



        function searchReservations(query) {
            fetch(`/reservations/v/q/${query}`)
                .then(response => response.json())
                .then(data => {
                    const tableBody = document.querySelector("table tbody");
                    tableBody.innerHTML = ''; 

                    data.forEach(reservation => {

                        const formattedStartDate = formatDate(reservation.startDate);
                        const formattedEndDate = formatDate(reservation.endDate);
                        
                        
                       


                        const row = document.createElement('tr');
                        row.innerHTML = `
                         
                            <td>
                            ${isAuthenticated
                                ? `<a href="/reservations/v/${reservation.id}">${reservation.resourceName}</a>` 
                                : reservation.resourceName}
                            </td>
                            <td>${reservation.userName}</td>

                            <td>${formattedStartDate}</td>
                            <td>${formattedEndDate}</td>


                            <td>${reservation.totalHours.toFixed(0)}</td> 

                            ${reservation.canDelete ? `<td><button onclick="deleteReservation(${reservation.id})" class="btn btn-danger">DELETE</button></td>` : ''}
                        `;
                        tableBody.appendChild(row);
                    });
                });
        }
    </script>
}
