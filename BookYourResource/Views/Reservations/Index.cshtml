@model List<ReservationViewModel>

<h2>Active Reservations</h2>

@if (User.Identity.IsAuthenticated)
{
    
    <a asp-action="CreateReservationForm" class="btn btn-success mb-2">NEW</a>
}


<input id="search-input" type="text" placeholder="Search by resource name..." class="form-control mb-3" style="display:inline-block; width: 200px;" />


<table class="table">
    <thead>
        <tr>
            <th>Resource Name</th>
            <th>User</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Hours</th>
            @if (User.Identity.IsAuthenticated) 
            {
                <th>Actions</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var reservation in Model)
        {
            <tr>
                <td>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <a asp-action="Details" asp-route-id="@reservation.Id">@reservation.ResourceName</a>
                    }
                    else
                    {
                        @reservation.ResourceName
                    }
                </td>
                <td>@reservation.UserName</td>
                <td>@reservation.StartDate.ToString("g")</td>
                <td>@reservation.EndDate.ToString("g")</td>
                <td>@(reservation.EndDate - reservation.StartDate).TotalHours</td>
                @if (User.Identity.IsAuthenticated)
                {
                    <td>
                        @if (reservation.CanDelete)
                        {
                            <button onclick="deleteReservation(@reservation.Id)" class="btn btn-danger">DELETE</button>
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>



@section Scripts {
    <script>
        function deleteReservation(id) {
            if (confirm('Are you sure you want to delete this reservation?')) {
                fetch(`/reservations/${id}`, {
                    method: 'DELETE'
                }).then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        alert('Failed to delete reservation.');
                    }
                });
            }
        }

        // Wyszukiwanie rezerwacji po nazwie zasobu
        let typingTimer;
        const doneTypingInterval = 300;

        document.getElementById('search-input').addEventListener('keyup', function() {
            clearTimeout(typingTimer);
            typingTimer = setTimeout(function() {
                const query = document.getElementById('search-input').value;
                searchReservations(query);
            }, doneTypingInterval);
        });

        document.getElementById('search-input').addEventListener('keydown', function() {
            clearTimeout(typingTimer);
        });

        function searchReservations(query) {
            fetch(`/reservations/q/${query}`)
                .then(response => response.json())
                .then(data => {
                    const tableBody = document.querySelector("table tbody");
                    tableBody.innerHTML = ''; 

                    data.forEach(reservation => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${reservation.resourceName}</td>
                            <td>${reservation.userName}</td>
                            <td>${reservation.startDate}</td>
                            <td>${reservation.endDate}</td>
                            <td>${(new Date(reservation.endDate) - new Date(reservation.startDate)) / 3600000}</td>
                            ${reservation.canDelete ? `<td><button onclick="deleteReservation(${reservation.id})" class="btn btn-danger">DELETE</button></td>` : ''}
                        `;
                        tableBody.appendChild(row);
                    });
                });
        }
    </script>
}
